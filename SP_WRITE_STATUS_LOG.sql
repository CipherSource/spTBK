CREATE OR REPLACE 
PROCEDURE SP_WRITE_STATUS_LOG 
(
P_STATUS_TYPE IN VARCHAR2 := NULL, 
P_STATUS IN VARCHAR2 := NULL, 
P_INFORM_ID IN NUMBER := NULL, 
P_STOCK_ID IN NUMBER := NULL, 
P_TARO_ID IN NUMBER := NULL,
P_EMP_ID IN VARCHAR2 := NULL, 
P_RESULT OUT NUMBER) 
IS L_LOG_TEMPLATE_ID NUMBER;
L_MESSAGE VARCHAR2(2000);
L_MESSAGE_TYPE VARCHAR2(200);
L_USER VARCHAR2 (200);
BEGIN

--get LOG_TEMPLATE_ID
SELECT LOG_TEMPLATE_ID INTO L_LOG_TEMPLATE_ID FROM REF_LOG_TEMPLATE WHERE STATUS_TYPE = P_STATUS_TYPE AND STATUS = P_STATUS AND ROWNUM = 1;

--incomplete 
SELECT MESSAGE INTO L_MESSAGE FROM REF_LOG_TEMPLATE WHERE LOG_TEMPLATE_ID = L_LOG_TEMPLATE_ID;

--for MESSAGE_TYPE COLUMN
SELECT MESSAGE_TYPE INTO L_MESSAGE_TYPE FROM REF_LOG_TEMPLATE WHERE LOG_TEMPLATE_ID = L_LOG_TEMPLATE_ID;

--for CREATE_USER COLUMN
SELECT EMP_ID || ' ' || FIRST_NAME || ' ' || LAST_NAME INTO L_USER FROM VW_BROK_USER WHERE EMP_ID = P_EMP_ID;

INSERT INTO STATUS_LOG(STATUS_LOG_ID, INFORM_ID, STATUS, CREATE_DATE, LOG_TEMPLATE_ID, STATUS_TYPE, MESSAGE, CREATE_USER, STOCK_ID, MESSAGE_TYPE)
SELECT SEQ_STATUS_LOG.NEXTVAL, P_INFORM_ID, P_STATUS, CURRENT_DATE, L_LOG_TEMPLATE_ID, P_STATUS_TYPE, L_MESSAGE, L_USER, P_STOCK_ID, L_MESSAGE_TYPE
FROM DUAL;

-- STATUS TABLE 'TXN', 'PRINT', 'EXPORT', 'RID', 'PAID', 'SENDER', 'SEND', 'R','OWNER'
IF P_STATUS_TYPE = 'TXN' THEN
MERGE INTO STATUS S
USING (SELECT P_INFORM_ID INFORM_ID, P_STATUS STATUS FROM DUAL) TEMP ON (S.INFORM_ID = TEMP.INFORM_ID)
WHEN MATCHED THEN
UPDATE
SET TXN_STATUS = TEMP.STATUS, UPDATE_DATE = CURRENT_DATE
WHERE INFORM_ID = TEMP.INFORM_ID
WHEN NOT MATCHED THEN
INSERT (INFORM_ID, TXN_STATUS, CREATE_DATE)
VALUES (TEMP.INFORM_ID, TEMP.STATUS, CURRENT_DATE);
END IF;

IF P_STATUS_TYPE = 'PRINT' THEN
MERGE INTO STATUS S
USING (SELECT P_INFORM_ID INFORM_ID, P_STATUS STATUS FROM DUAL) TEMP ON (S.INFORM_ID = TEMP.INFORM_ID)
WHEN MATCHED THEN
UPDATE
SET PRINT_STATUS = TEMP.STATUS, UPDATE_DATE = CURRENT_DATE
WHERE INFORM_ID = TEMP.INFORM_ID
WHEN NOT MATCHED THEN
INSERT (INFORM_ID, PRINT_STATUS, CREATE_DATE)
VALUES (TEMP.INFORM_ID, TEMP.STATUS, CURRENT_DATE);
END IF;

IF P_STATUS_TYPE = 'EXPORT' THEN
MERGE INTO STATUS S
USING (SELECT P_INFORM_ID INFORM_ID, P_STATUS STATUS FROM DUAL) TEMP ON (S.INFORM_ID = TEMP.INFORM_ID)
WHEN MATCHED THEN
UPDATE
SET EXPORT_STATUS = TEMP.STATUS, UPDATE_DATE = CURRENT_DATE
WHERE INFORM_ID = TEMP.INFORM_ID
WHEN NOT MATCHED THEN
INSERT (INFORM_ID, EXPORT_STATUS, CREATE_DATE)
VALUES (TEMP.INFORM_ID, TEMP.STATUS, CURRENT_DATE);
END IF;

IF P_STATUS_TYPE = 'RID' THEN
MERGE INTO STATUS S
USING (SELECT P_INFORM_ID INFORM_ID, P_STATUS STATUS FROM DUAL) TEMP ON (S.INFORM_ID = TEMP.INFORM_ID)
WHEN MATCHED THEN
UPDATE
SET RID_STATUS = TEMP.STATUS, UPDATE_DATE = CURRENT_DATE
WHERE INFORM_ID = TEMP.INFORM_ID
WHEN NOT MATCHED THEN
INSERT (INFORM_ID, RID_STATUS, CREATE_DATE)
VALUES (TEMP.INFORM_ID, TEMP.STATUS, CURRENT_DATE);
END IF;

IF P_STATUS_TYPE = 'PAID' THEN
MERGE INTO STATUS S
USING (SELECT P_INFORM_ID INFORM_ID, P_STATUS STATUS FROM DUAL) TEMP ON (S.INFORM_ID = TEMP.INFORM_ID)
WHEN MATCHED THEN
UPDATE
SET PAID_STATUS = TEMP.STATUS, UPDATE_DATE = CURRENT_DATE
WHERE INFORM_ID = TEMP.INFORM_ID
WHEN NOT MATCHED THEN
INSERT (INFORM_ID, PAID_STATUS, CREATE_DATE)
VALUES (TEMP.INFORM_ID, TEMP.STATUS, CURRENT_DATE);
END IF;

IF P_STATUS_TYPE = 'PRINT' THEN
MERGE INTO STATUS S
USING (SELECT P_INFORM_ID INFORM_ID, P_STATUS STATUS FROM DUAL) TEMP ON (S.INFORM_ID = TEMP.INFORM_ID)
WHEN MATCHED THEN
UPDATE
SET PRINT_STATUS = TEMP.STATUS, UPDATE_DATE = CURRENT_DATE
WHERE INFORM_ID = TEMP.INFORM_ID
WHEN NOT MATCHED THEN
INSERT (INFORM_ID, PRINT_STATUS, CREATE_DATE)
VALUES (TEMP.INFORM_ID, TEMP.STATUS, CURRENT_DATE);
END IF;

IF P_STATUS_TYPE = 'SENDER' THEN
MERGE INTO STATUS S
USING (SELECT P_INFORM_ID INFORM_ID, P_STATUS STATUS FROM DUAL) TEMP ON (S.INFORM_ID = TEMP.INFORM_ID)
WHEN MATCHED THEN
UPDATE
SET SENDER_STATUS = TEMP.STATUS, UPDATE_DATE = CURRENT_DATE
WHERE INFORM_ID = TEMP.INFORM_ID
WHEN NOT MATCHED THEN
INSERT (INFORM_ID, SENDER_STATUS, CREATE_DATE)
VALUES (TEMP.INFORM_ID, TEMP.STATUS, CURRENT_DATE);
END IF;

IF P_STATUS_TYPE = 'SEND' THEN
MERGE INTO STATUS S
USING (SELECT P_INFORM_ID INFORM_ID, P_STATUS STATUS FROM DUAL) TEMP ON (S.INFORM_ID = TEMP.INFORM_ID)
WHEN MATCHED THEN
UPDATE
SET SEND_STATUS = TEMP.STATUS, UPDATE_DATE = CURRENT_DATE
WHERE INFORM_ID = TEMP.INFORM_ID
WHEN NOT MATCHED THEN
INSERT (INFORM_ID, SEND_STATUS, CREATE_DATE)
VALUES (TEMP.INFORM_ID, TEMP.STATUS, CURRENT_DATE);
END IF;

IF P_STATUS_TYPE = 'R' THEN
MERGE INTO STATUS S
USING (SELECT P_INFORM_ID INFORM_ID, P_STATUS STATUS FROM DUAL) TEMP ON (S.INFORM_ID = TEMP.INFORM_ID)
WHEN MATCHED THEN
UPDATE
SET R_STATUS = TEMP.STATUS, UPDATE_DATE = CURRENT_DATE
WHERE INFORM_ID = TEMP.INFORM_ID
WHEN NOT MATCHED THEN
INSERT (INFORM_ID, R_STATUS, CREATE_DATE)
VALUES (TEMP.INFORM_ID, TEMP.STATUS, CURRENT_DATE);
END IF;

IF P_STATUS_TYPE = 'OWNER' THEN
MERGE INTO STATUS S
USING (SELECT P_INFORM_ID INFORM_ID, P_STATUS STATUS FROM DUAL) TEMP ON (S.INFORM_ID = TEMP.INFORM_ID)
WHEN MATCHED THEN
UPDATE
SET OWNER_STATUS = TEMP.STATUS, UPDATE_DATE = CURRENT_DATE
WHERE INFORM_ID = TEMP.INFORM_ID
WHEN NOT MATCHED THEN
INSERT (INFORM_ID, OWNER_STATUS, CREATE_DATE)
VALUES (TEMP.INFORM_ID, TEMP.STATUS, CURRENT_DATE);
END IF;


--TARO TABLE FIX_STATUS
IF P_STATUS_TYPE = 'FIX' THEN
MERGE INTO TARO S
USING (SELECT P_INFORM_ID INFORM_ID, P_STATUS STATUS FROM DUAL) TEMP ON (S.INFORM_ID = TEMP.INFORM_ID)
WHEN MATCHED THEN
UPDATE
SET FIX_STATUS = TEMP.STATUS, UPDATE_DATE = CURRENT_DATE
WHERE INFORM_ID = TEMP.INFORM_ID
WHEN NOT MATCHED THEN
INSERT (INFORM_ID, FIX_STATUS, CREATE_DATE)
VALUES (TEMP.INFORM_ID, TEMP.STATUS, CURRENT_DATE);
END IF;


--STOCK TABLE STOCK_STATUS
IF P_STATUS_TYPE = 'STOCK' THEN
MERGE INTO STOCK S
USING (SELECT P_INFORM_ID INFORM_ID, P_STOCK_ID STOCK_ID, P_STATUS STATUS FROM DUAL) TEMP ON (S.STOCK_ID = TEMP.STOCK_ID)
WHEN MATCHED THEN
UPDATE
SET STOCK_STATUS = TEMP.STATUS, UPDATE_DATE = CURRENT_DATE
WHERE STOCK_ID = TEMP.STOCK_ID
WHEN NOT MATCHED THEN
INSERT (INFORM_ID, STOCK_STATUS, CREATE_DATE)
VALUES (TEMP.INFORM_ID, TEMP.STATUS, CURRENT_DATE);
END IF;

END;

