CREATE OR REPLACE 
PROCEDURE SP_VALIDATE_BACK AS
L_STATUS VARCHAR2(5);
P_IN_STATUS_TYPE VARCHAR2(20);
P_IN_STATUS VARCHAR2(5); 
P_IN_INFORM_ID NUMBER; 
P_IN_STOCK_ID NUMBER; 
P_IN_TARO_ID NUMBER;
P_IN_EMP_ID VARCHAR2(50);
P_OUT_RESULT NUMBER;
BEGIN

-- ***** FOR PASS ***** 
FOR BACK_REC IN (
	SELECT B.INFORM_ID
	FROM BACK B 
	INNER JOIN STATUS S ON B.INFORM_ID = S.INFORM_ID
	WHERE S.TXN_STATUS = 'RS'
	AND TRUNC(B.PASS_DATE) = TRUNC(CURRENT_DATE)
)
LOOP 
BEGIN

		P_IN_STATUS_TYPE := 'TXN' ;
		P_IN_STATUS := 'P';
		P_IN_INFORM_ID := BACK_REC.INFORM_ID;
		P_IN_STOCK_ID := NULL;
		P_IN_TARO_ID := NULL;
		P_IN_EMP_ID := '0' ;

		SP_WRITE_STATUS(P_IN_STATUS_TYPE,P_IN_STATUS,P_IN_INFORM_ID,P_IN_STOCK_ID,P_IN_TARO_ID,P_IN_EMP_ID,P_OUT_RESULT);

END;
END LOOP;

-- ***** FOR NOT PASS ***** 
FOR BACK_REC IN (
	SELECT B.INFORM_ID, B.NOT_PASS_MESSAGE
	FROM BACK B 
	INNER JOIN STATUS S ON B.INFORM_ID = S.INFORM_ID
	WHERE S.TXN_STATUS = 'RS'
	AND TRUNC(B.NOT_PASS_DATE) = TRUNC(CURRENT_DATE)
)
LOOP 
BEGIN

		P_IN_STATUS_TYPE := 'TXN' ;
		P_IN_STATUS := 'NP';
		P_IN_INFORM_ID := BACK_REC.INFORM_ID;
		P_IN_STOCK_ID := NULL;
		P_IN_TARO_ID := NULL;
		P_IN_EMP_ID := '0' ;

		SP_WRITE_STATUS(P_IN_STATUS_TYPE,P_IN_STATUS,P_IN_INFORM_ID,P_IN_STOCK_ID,P_IN_TARO_ID,P_IN_EMP_ID,P_OUT_RESULT);

		UPDATE STATUS
		SET TXN_NP_REASON = BACK_REC.NOT_PASS_MESSAGE
		WHERE INFORM_ID = BACK_REC.INFORM_ID;

END;
END LOOP;

-- ***** FOR CANCEL C ***** 
FOR BACK_REC IN (
	SELECT B.INFORM_ID, ST.STOCK_ID, B.CANCEL_MESSAGE, B.CC_MESSAGE
	FROM BACK B 
	INNER JOIN STATUS S ON B.INFORM_ID = S.INFORM_ID
	INNER JOIN STOCK ST ON ST.INFORM_ID = B.INFORM_ID
	WHERE S.TXN_STATUS = 'P' AND S.RID_STATUS = 'RC'
	AND TRUNC(B.CANCEL_DATE) = TRUNC(CURRENT_DATE)
)
LOOP 
BEGIN

			P_IN_STATUS_TYPE := 'TXN' ;
			P_IN_STATUS := 'C';
			P_IN_INFORM_ID := BACK_REC.INFORM_ID;
			P_IN_STOCK_ID := NULL;
			P_IN_TARO_ID := NULL;
			P_IN_EMP_ID := '0' ;

			SP_WRITE_STATUS(P_IN_STATUS_TYPE,P_IN_STATUS,P_IN_INFORM_ID,P_IN_STOCK_ID,P_IN_TARO_ID,P_IN_EMP_ID,P_OUT_RESULT);
			
			P_IN_STATUS_TYPE := 'STOCK' ;
			P_IN_STATUS := 'C';
			P_IN_INFORM_ID := BACK_REC.INFORM_ID;
			P_IN_STOCK_ID := BACK_REC.STOCK_ID;
			P_IN_TARO_ID := NULL;
			P_IN_EMP_ID := '0' ;

			SP_WRITE_STATUS(P_IN_STATUS_TYPE,P_IN_STATUS,P_IN_INFORM_ID,P_IN_STOCK_ID,P_IN_TARO_ID,P_IN_EMP_ID,P_OUT_RESULT);
		
			UPDATE STATUS
			SET TXN_C_REASON = BACK_REC.CANCEL_MESSAGE
			WHERE INFORM_ID = BACK_REC.INFORM_ID;

END;
END LOOP;

-- ***** FOR REDEEM CC ***** 
FOR BACK_REC IN (
	SELECT B.INFORM_ID, ST.STOCK_ID, B.CANCEL_MESSAGE, B.CC_MESSAGE
	FROM BACK B 
	INNER JOIN STATUS S ON B.INFORM_ID = S.INFORM_ID
	INNER JOIN STOCK ST ON ST.INFORM_ID = B.INFORM_ID
	WHERE S.TXN_STATUS = 'P' AND S.RID_STATUS = 'RC'
	AND TRUNC(B.CC_DATE) = TRUNC(CURRENT_DATE)
)
LOOP 
BEGIN

			P_IN_STATUS_TYPE := 'TXN' ;
			P_IN_STATUS := 'CC';
			P_IN_INFORM_ID := BACK_REC.INFORM_ID;
			P_IN_STOCK_ID := NULL;
			P_IN_TARO_ID := NULL;
			P_IN_EMP_ID := '0' ;

			SP_WRITE_STATUS(P_IN_STATUS_TYPE,P_IN_STATUS,P_IN_INFORM_ID,P_IN_STOCK_ID,P_IN_TARO_ID,P_IN_EMP_ID,P_OUT_RESULT);
			
			P_IN_STATUS_TYPE := 'STOCK' ;
			P_IN_STATUS := 'CC';
			P_IN_INFORM_ID := BACK_REC.INFORM_ID;
			P_IN_STOCK_ID := BACK_REC.STOCK_ID;
			P_IN_TARO_ID := NULL;
			P_IN_EMP_ID := '0' ;

			SP_WRITE_STATUS(P_IN_STATUS_TYPE,P_IN_STATUS,P_IN_INFORM_ID,P_IN_STOCK_ID,P_IN_TARO_ID,P_IN_EMP_ID,P_OUT_RESULT);
		
				UPDATE STATUS
				SET TXN_CC_REASON = BACK_REC.CC_MESSAGE
				WHERE INFORM_ID = BACK_REC.INFORM_ID;

END;
END LOOP;

-- ***** FOR RECEIVED STATUS RID_STATUS = RC ***** 
FOR BACK_REC IN (
	SELECT B.INFORM_ID
	FROM BACK B 
	INNER JOIN STATUS S ON B.INFORM_ID = S.INFORM_ID
	WHERE S.TXN_STATUS = 'P' 
	AND TRUNC(B.CODE_DATE) = TRUNC(CURRENT_DATE) 
	AND B.CODE_STICKER IS NOT NULL
	AND B.CODE_CMI IS NOT NULL
)
LOOP 
BEGIN

		P_IN_STATUS_TYPE := 'RID' ;
		P_IN_STATUS := 'RC';
		P_IN_INFORM_ID := BACK_REC.INFORM_ID;
		P_IN_STOCK_ID := NULL;
		P_IN_TARO_ID := NULL;
		P_IN_EMP_ID := '0' ;

		SP_WRITE_STATUS(P_IN_STATUS_TYPE,P_IN_STATUS,P_IN_INFORM_ID,P_IN_STOCK_ID,P_IN_TARO_ID,P_IN_EMP_ID,P_OUT_RESULT);	
	
END;
END LOOP;

-- ***** FOR PAID STATUS; PAID_STATUS = PD ***** 
FOR BACK_REC IN (
	SELECT B.INFORM_ID
	FROM BACK B 
	INNER JOIN STATUS S ON B.INFORM_ID = S.INFORM_ID
	WHERE S.TXN_STATUS = 'P' 
	AND TRUNC(B.PAID_DATE) = TRUNC(CURRENT_DATE)
)
LOOP 
BEGIN

			P_IN_STATUS_TYPE := 'PAID' ;
			P_IN_STATUS := 'PD';
			P_IN_INFORM_ID := BACK_REC.INFORM_ID;
			P_IN_STOCK_ID := NULL;
			P_IN_TARO_ID := NULL;
			P_IN_EMP_ID := '0' ;

			SP_WRITE_STATUS(P_IN_STATUS_TYPE,P_IN_STATUS,P_IN_INFORM_ID,P_IN_STOCK_ID,P_IN_TARO_ID,P_IN_EMP_ID,P_OUT_RESULT);
		
END;
END LOOP;


/*
--FOR PASS NOT PASS
FOR BACK_REC IN (
	SELECT B.INFORM_ID--, B.NOT_PASS_MESSAGE, B.PASS_DATE, B.NOT_PASS_DATE
	FROM BACK B 
	INNER JOIN STATUS S ON B.INFORM_ID = S.INFORM_ID
	WHERE S.TXN_STATUS = 'RS'
	--AND (B.PASS_DATE IS NOT NULL OR B.NOT_PASS_DATE IS NOT NULL)
	AND TRUNC(B.PASS_DATE) = TRUNC(CURRENT_DATE)
)
LOOP 
BEGIN
		
		BEGIN
			SELECT 	CASE 	WHEN TRUNC(PASS_DATE) = TRUNC(CURRENT_DATE) THEN 'P' 
										WHEN TRUNC(NOT_PASS_DATE) = TRUNC(CURRENT_DATE) THEN 'NP'
							END INTO L_STATUS FROM BACK
			WHERE INFORM_ID = BACK_REC.INFORM_ID;
		EXCEPTION WHEN NO_DATA_FOUND THEN
			L_STATUS := NULL;
		END;
		

		--IF L_STATUS IS NOT NULL THEN
			
			P_IN_STATUS_TYPE := 'TXN' ;
			P_IN_STATUS := 'P';
			P_IN_INFORM_ID := BACK_REC.INFORM_ID;
			P_IN_STOCK_ID := NULL;
			P_IN_TARO_ID := NULL;
			P_IN_EMP_ID := '0' ;

			SP_WRITE_STATUS(P_IN_STATUS_TYPE,P_IN_STATUS,P_IN_INFORM_ID,P_IN_STOCK_ID,P_IN_TARO_ID,P_IN_EMP_ID,P_OUT_RESULT);
			
			--IF L_STATUS = 'NP' THEN
			--	UPDATE STATUS
			--	SET TXN_NP_REASON = BACK_REC.NOT_PASS_MESSAGE
			--	WHERE INFORM_ID = BACK_REC.INFORM_ID;
			--END IF; -- IF L_STATUS = 'NP' THEN

		--END IF; -- IF L_STATUS IS NOT NULL THEN

END;
END LOOP;

--FOR CANCEL AND REDEEM TXN_STATUS = C, CC
FOR BACK_REC IN (
	SELECT B.INFORM_ID, ST.STOCK_ID, B.CANCEL_MESSAGE, B.CC_MESSAGE
	FROM BACK B 
	INNER JOIN STATUS S ON B.INFORM_ID = S.INFORM_ID
	INNER JOIN STOCK ST ON ST.INFORM_ID = B.INFORM_ID
	WHERE S.TXN_STATUS = 'P' AND S.RID_STATUS = 'RC'
	--AND (B.CANCEL_DATE IS NOT NULL OR B.CC_DATE IS NOT NULL)
	AND (TRUNC(B.CANCEL_DATE) = TRUNC(CURRENT_DATE) OR TRUNC(B.CC_DATE) = TRUNC(CURRENT_DATE))
)
LOOP 
BEGIN

		BEGIN
			SELECT CASE	WHEN TRUNC(CANCEL_DATE) = TRUNC(CURRENT_DATE) THEN 'C' 
									WHEN TRUNC(CC_DATE) = TRUNC(CURRENT_DATE) THEN 'CC'
						 END INTO L_STATUS FROM BACK
			WHERE INFORM_ID = BACK_REC.INFORM_ID;
		EXCEPTION WHEN NO_DATA_FOUND THEN
			L_STATUS := NULL;
		END;

		IF L_STATUS IS NOT NULL THEN 
			P_IN_STATUS_TYPE := 'TXN' ;
			P_IN_STATUS := L_STATUS;
			P_IN_INFORM_ID := BACK_REC.INFORM_ID;
			P_IN_STOCK_ID := NULL;
			P_IN_TARO_ID := NULL;
			P_IN_EMP_ID := '0' ;

			SP_WRITE_STATUS(P_IN_STATUS_TYPE,P_IN_STATUS,P_IN_INFORM_ID,P_IN_STOCK_ID,P_IN_TARO_ID,P_IN_EMP_ID,P_OUT_RESULT);
			
			P_IN_STATUS_TYPE := 'STOCK' ;
			P_IN_STATUS := L_STATUS;
			P_IN_INFORM_ID := BACK_REC.INFORM_ID;
			P_IN_STOCK_ID := BACK_REC.STOCK_ID;
			P_IN_TARO_ID := NULL;
			P_IN_EMP_ID := '0' ;

			SP_WRITE_STATUS(P_IN_STATUS_TYPE,P_IN_STATUS,P_IN_INFORM_ID,P_IN_STOCK_ID,P_IN_TARO_ID,P_IN_EMP_ID,P_OUT_RESULT);
		
			IF L_STATUS = 'C' THEN
				UPDATE STATUS
				SET TXN_C_REASON = BACK_REC.CANCEL_MESSAGE
				WHERE INFORM_ID = BACK_REC.INFORM_ID;
			ELSIF L_STATUS = 'CC' THEN
				UPDATE STATUS
				SET TXN_CC_REASON = BACK_REC.CC_MESSAGE
				WHERE INFORM_ID = BACK_REC.INFORM_ID;
			END IF; -- IF L_STATUS = 'CC' THEN

		END IF; -- IF L_STATUS IS NOT NULL THEN 
END;
END LOOP;

--FOR RECEIVED STATUS RID_STATUS = RC
FOR BACK_REC IN (
	SELECT B.INFORM_ID
	FROM BACK B 
	INNER JOIN STATUS S ON B.INFORM_ID = S.INFORM_ID
	WHERE S.TXN_STATUS = 'P' 
	--AND B.CODE_DATE IS NOT NULL 
	AND TRUNC(B.CODE_DATE) = TRUNC(CURRENT_DATE) 
	AND B.CODE_STICKER IS NOT NULL
	AND B.CODE_CMI IS NOT NULL
)
LOOP 
BEGIN

BEGIN
SELECT CASE WHEN TRUNC(CODE_DATE) = TRUNC(CURRENT_DATE) THEN 'RC' 
							END INTO L_STATUS FROM BACK
WHERE INFORM_ID = BACK_REC.INFORM_ID;
EXCEPTION WHEN NO_DATA_FOUND THEN
L_STATUS := NULL;
END;

		IF L_STATUS IS NOT NULL THEN 
			P_IN_STATUS_TYPE := 'RID' ;
			P_IN_STATUS := L_STATUS;
			P_IN_INFORM_ID := BACK_REC.INFORM_ID;
			P_IN_STOCK_ID := NULL;
			P_IN_TARO_ID := NULL;
			P_IN_EMP_ID := '0' ;

			SP_WRITE_STATUS(P_IN_STATUS_TYPE,P_IN_STATUS,P_IN_INFORM_ID,P_IN_STOCK_ID,P_IN_TARO_ID,P_IN_EMP_ID,P_OUT_RESULT);
		
		END IF; -- IF L_STATUS IS NOT NULL THEN 
END;
END LOOP;

--FOR PAID STATUS; PAID_STATUS = PD
FOR BACK_REC IN (
	SELECT B.INFORM_ID
	FROM BACK B 
	INNER JOIN STATUS S ON B.INFORM_ID = S.INFORM_ID
	WHERE S.TXN_STATUS = 'P' 
	--AND B.PAID_DATE IS NOT NULL
	AND TRUNC(B.PAID_DATE) = TRUNC(CURRENT_DATE)
)
LOOP 
BEGIN

BEGIN
SELECT CASE WHEN TRUNC(PAID_DATE) = TRUNC(CURRENT_DATE) THEN 'PD' 
							END INTO L_STATUS FROM BACK
WHERE INFORM_ID = BACK_REC.INFORM_ID;
EXCEPTION WHEN NO_DATA_FOUND THEN
L_STATUS := NULL;
END;

		IF L_STATUS IS NOT NULL THEN 
			P_IN_STATUS_TYPE := 'PAID' ;
			P_IN_STATUS := L_STATUS;
			P_IN_INFORM_ID := BACK_REC.INFORM_ID;
			P_IN_STOCK_ID := NULL;
			P_IN_TARO_ID := NULL;
			P_IN_EMP_ID := '0' ;

			SP_WRITE_STATUS(P_IN_STATUS_TYPE,P_IN_STATUS,P_IN_INFORM_ID,P_IN_STOCK_ID,P_IN_TARO_ID,P_IN_EMP_ID,P_OUT_RESULT);
		
		END IF; -- IF L_STATUS IS NOT NULL THEN 
END;
END LOOP;

*/

END;
