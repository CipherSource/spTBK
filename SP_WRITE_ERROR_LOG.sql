CREATE OR REPLACE 
PROCEDURE SP_WRITE_ERROR_LOG (
P_INFORM_ID IN NUMBER, P_ERROR_FLAG OUT NUMBER)
AS
L_ERROR_MSG VARCHAR2(200);
L_ERROR_FLAG NUMBER;
SQL_STMT VARCHAR2(4000);
L_CA_NO VARCHAR2(15);
L_PLAT_NO VARCHAR2(50);
L_ENGINE_NO VARCHAR2(20);
L_SN_BODY VARCHAR2(20);
L_COVER_DATE DATE;
L_TBK002_EXIST1 VARCHAR2(2000);
L_TBK002_EXIST2 VARCHAR2(2000);
L_ISNUM NUMBER;
L_ROWCOUNT NUMBER;
L_INS_TYPE_CODE NUMBER;
L_FIELD_IS_NULL NUMBER;
/*
TBK001	Require				กรุณากรอกข้อมูล {column}
TBK002	Valid					ข้อมูล {column} ไม่ตรงกับข้อมูลในฐาน กรุณาตรวจสอบอีกครั้ง
TBK003	Format				ข้อมูล {column} ไม่ตรงกับรูปแบบเลขที่บัตรประชาชน 13 หลัก
TBK004	Format				ข้อมูลปีรถ ต้องเป็นปี คศ กรุณาตรวจสอบอีกครั้ง
TBK005	Duplicate			ข้อมูลทะเบียนรถนี้ มีในระบบแล้ว
TBK006	Format				ข้อมูล {column}  ไม่ถูกต้อง
TBK007	Out of range	ระยะเวลาในการคุ้มครองประกันภัย จะต้องมากกว่า 6 เดือน
*/
BEGIN

L_ROWCOUNT := 0;

--**********TBK001*********--
L_ERROR_FLAG := 0;
SELECT ERROR_MSG INTO L_ERROR_MSG FROM ERROR_CODE WHERE ERROR_CODE = 'TBK001';
FOR FIELD_REC IN
(SELECT FIELD, DESCRIPTION
FROM ERROR_FIELD WHERE ERROR_CODE = 'TBK001')
LOOP
BEGIN

SQL_STMT := 'SELECT CASE WHEN ' || FIELD_REC.FIELD || ' IS NULL THEN 1 ELSE 0 END FROM FRONT WHERE INFORM_ID = :P_INFORM_ID';
EXECUTE IMMEDIATE SQL_STMT INTO L_ERROR_FLAG USING P_INFORM_ID;

IF L_ERROR_FLAG = 1 THEN
INSERT INTO ERROR_LOG (
  ERROR_LOG_ID,
  ERROR_CODE,
  INFORM_ID,
  CREATE_DATE,
  ERROR_MSG
) SELECT
  SEQ_ERROR_LOG.NEXTVAL,
  'TBK001',
  P_INFORM_ID,
  CURRENT_DATE,
  REPLACE(L_ERROR_MSG, '{column}', FIELD_REC.DESCRIPTION)
FROM
  DUAL;
L_ROWCOUNT := L_ROWCOUNT + SQL%ROWCOUNT;
END IF;

END;
END LOOP;
--**********END TBK001*********--

--**********TBK002*********
L_ERROR_FLAG := 0;
SELECT ERROR_MSG INTO L_ERROR_MSG FROM ERROR_CODE WHERE ERROR_CODE = 'TBK002';

FOR FIELD_REC IN
(SELECT FIELD, DESCRIPTION, SOURCE, ORDER_BY, FIELD2
FROM ERROR_FIELD WHERE ERROR_CODE = 'TBK002')
LOOP
BEGIN

--compare consistency between code and name
IF FIELD_REC.ORDER_BY IN (2,3,7,8,9,12,14,16,18,20,22) THEN --2,3,7,8,9,12,14,16,18,20,22

SQL_STMT := 'SELECT ' || FIELD_REC.FIELD || ' , ' || FIELD_REC.FIELD2 || ' FROM FRONT WHERE INFORM_ID = :P_INFORM_ID';
EXECUTE IMMEDIATE SQL_STMT INTO L_TBK002_EXIST1, L_TBK002_EXIST2 USING P_INFORM_ID;

IF L_TBK002_EXIST1 IS NOT NULL AND L_TBK002_EXIST2 IS NOT NULL THEN
BEGIN
SQL_STMT := 'SELECT 0 FROM (SELECT 1 FROM ' || FIELD_REC.SOURCE || ' WHERE ' || FIELD_REC.FIELD || ' = :L_TBK002_EXIST1 AND ' || FIELD_REC.FIELD2 || ' = :L_TBK002_EXIST2 ) WHERE ROWNUM = 1 ';
EXECUTE IMMEDIATE SQL_STMT INTO L_ERROR_FLAG USING L_TBK002_EXIST1, L_TBK002_EXIST2;
EXCEPTION
      WHEN NO_DATA_FOUND THEN
        L_ERROR_FLAG := 1;
END;
END IF;
--check if value exists only
ELSIF FIELD_REC.ORDER_BY IN (1,4,5,6,10,11,13,15,17,19,21) THEN --1,4,5,6,10,11,13,15,17,19,21

SQL_STMT := 'SELECT ' || FIELD_REC.FIELD || ' FROM FRONT WHERE INFORM_ID = :P_INFORM_ID';
EXECUTE IMMEDIATE SQL_STMT INTO L_TBK002_EXIST1 USING P_INFORM_ID;

IF L_TBK002_EXIST1 IS NOT NULL THEN
BEGIN
SQL_STMT := 'SELECT 0 FROM (SELECT 1 FROM ' || FIELD_REC.SOURCE || ' WHERE ' || FIELD_REC.FIELD || ' = :L_TBK002_EXIST1) WHERE ROWNUM = 1';
EXECUTE IMMEDIATE SQL_STMT INTO L_ERROR_FLAG USING L_TBK002_EXIST1;
EXCEPTION
      WHEN NO_DATA_FOUND THEN
        L_ERROR_FLAG := 1;
END;
END IF;

END IF;

IF L_ERROR_FLAG = 1 THEN
INSERT INTO ERROR_LOG (
  ERROR_LOG_ID,
  ERROR_CODE,
  INFORM_ID,
  CREATE_DATE,
  ERROR_MSG
) SELECT
  SEQ_ERROR_LOG.NEXTVAL,
  'TBK002',
  P_INFORM_ID,
  CURRENT_DATE,
  REPLACE(L_ERROR_MSG, '{column}', FIELD_REC.DESCRIPTION)
FROM
  DUAL;
L_ROWCOUNT := L_ROWCOUNT + SQL%ROWCOUNT;
END IF;

END;
END LOOP;


--**********END TBK002*********--

--**********TBK003*********--
L_ERROR_FLAG := 0;
SELECT ERROR_MSG INTO L_ERROR_MSG FROM ERROR_CODE WHERE ERROR_CODE = 'TBK003';
FOR FIELD_REC IN
(SELECT FIELD, DESCRIPTION
FROM ERROR_FIELD WHERE ERROR_CODE = 'TBK003')
LOOP
BEGIN

SQL_STMT := 'SELECT CASE WHEN LENGTH(' || FIELD_REC.FIELD || ') <> 13 THEN 1 ELSE 0 END FROM FRONT WHERE INFORM_ID = :P_INFORM_ID';
EXECUTE IMMEDIATE SQL_STMT INTO L_ERROR_FLAG USING P_INFORM_ID;

IF L_ERROR_FLAG = 1 THEN
INSERT INTO ERROR_LOG (
  ERROR_LOG_ID,
  ERROR_CODE,
  INFORM_ID,
  CREATE_DATE,
  ERROR_MSG
) SELECT
  SEQ_ERROR_LOG.NEXTVAL,
  'TBK003',
  P_INFORM_ID,
  CURRENT_DATE,
  REPLACE(L_ERROR_MSG, '{column}', FIELD_REC.DESCRIPTION)
FROM
  DUAL;
L_ROWCOUNT := L_ROWCOUNT + SQL%ROWCOUNT;
END IF;

END;
END LOOP;
--**********END TBK003*********--

--**********TBK004*********
L_ERROR_FLAG := 0;
SELECT ERROR_MSG INTO L_ERROR_MSG FROM ERROR_CODE WHERE ERROR_CODE = 'TBK004';

SELECT CASE WHEN REGEXP_LIKE(CAR_YEAR,'^[[:digit:]]+$') THEN 1 ELSE 0 END INTO L_ISNUM FROM FRONT WHERE INFORM_ID = P_INFORM_ID;

IF L_ISNUM = 1 THEN
SELECT CASE WHEN CAR_YEAR > 2500 THEN 1 ELSE 0 END INTO L_ERROR_FLAG FROM FRONT WHERE INFORM_ID = P_INFORM_ID;
ELSIF L_ISNUM = 0 THEN
L_ERROR_FLAG := 1; --error if not only numbers
END IF;

IF L_ERROR_FLAG = 1 THEN
INSERT INTO ERROR_LOG (
  ERROR_LOG_ID,
  ERROR_CODE,
  INFORM_ID,
  CREATE_DATE,
  ERROR_MSG
) SELECT
  SEQ_ERROR_LOG.NEXTVAL,
  'TBK004',
  P_INFORM_ID,
  CURRENT_DATE,
  L_ERROR_MSG
FROM
  DUAL;
L_ROWCOUNT := L_ROWCOUNT + SQL%ROWCOUNT;
END IF;

--**********END TBK004*********--

--**********TBK005********* --rewrite adding VW_BROK_CHK_DUP

L_ERROR_FLAG := 0;
SELECT CA_NO, PLAT_NO, ENGINE_NO, SN_BODY, INS_TYPE_CODE, COVER_DATE INTO L_CA_NO, L_PLAT_NO, L_ENGINE_NO, L_SN_BODY, L_INS_TYPE_CODE, L_COVER_DATE FROM INFORM WHERE INFORM_ID = P_INFORM_ID;

--DBMS_OUTPUT.PUT_LINE('CA_NO : ' || L_CA_NO || 'PLAT_NO : ' || L_PLAT_NO || 'ENGINE_NO : ' || L_ENGINE_NO || 'SN_BODY : ' || L_SN_BODY || 'COVER_DATE : ' || L_COVER_DATE);

SELECT ERROR_MSG INTO L_ERROR_MSG FROM ERROR_CODE WHERE ERROR_CODE = 'TBK005';
FOR FIELD_REC IN
(SELECT ORDER_BY, FIELD, DESCRIPTION
FROM ERROR_FIELD WHERE ERROR_CODE = 'TBK005')
LOOP
BEGIN

IF FIELD_REC.ORDER_BY = 1 AND L_CA_NO IS NOT NULL THEN

BEGIN
SELECT * INTO L_ERROR_FLAG FROM (SELECT 1 FROM VW_BROK_CHK_DUP WHERE INS_TYPE_CODE = L_INS_TYPE_CODE AND CA_NO = L_CA_NO) WHERE ROWNUM = 1;
EXCEPTION
      WHEN NO_DATA_FOUND THEN
        L_ERROR_FLAG := 0;
END;

IF L_ERROR_FLAG  = 0 THEN

BEGIN
SELECT * INTO L_ERROR_FLAG FROM (SELECT 1 FROM INFORM I WHERE INS_TYPE_CODE = L_INS_TYPE_CODE AND CA_NO = L_CA_NO AND INFORM_ID <> P_INFORM_ID) WHERE ROWNUM = 1;
EXCEPTION
      WHEN NO_DATA_FOUND THEN
        L_ERROR_FLAG := 0;
END;
END IF;

ELSIF FIELD_REC.ORDER_BY = 2 AND L_PLAT_NO IS NOT NULL THEN

BEGIN
SELECT * INTO L_ERROR_FLAG FROM (SELECT 1 FROM VW_BROK_CHK_DUP WHERE INS_TYPE_CODE = L_INS_TYPE_CODE AND PLATE_NO = L_PLAT_NO) WHERE ROWNUM = 1;
EXCEPTION
      WHEN NO_DATA_FOUND THEN
        L_ERROR_FLAG := 0;
END;

IF L_ERROR_FLAG  = 0 THEN

BEGIN
SELECT * INTO L_ERROR_FLAG FROM (SELECT 1 FROM INFORM I WHERE INS_TYPE_CODE = L_INS_TYPE_CODE AND PLAT_NO = L_PLAT_NO AND INFORM_ID <> P_INFORM_ID) WHERE ROWNUM = 1;
EXCEPTION
      WHEN NO_DATA_FOUND THEN
        L_ERROR_FLAG := 0;
END;
END IF;

ELSIF FIELD_REC.ORDER_BY = 3  AND L_ENGINE_NO IS NOT NULL THEN

BEGIN
SELECT * INTO L_ERROR_FLAG FROM (SELECT 1 FROM VW_BROK_CHK_DUP WHERE INS_TYPE_CODE = L_INS_TYPE_CODE AND ENG_NO = L_ENGINE_NO) WHERE ROWNUM = 1;
EXCEPTION
      WHEN NO_DATA_FOUND THEN
        L_ERROR_FLAG := 0;
END;

IF L_ERROR_FLAG  = 0 THEN

BEGIN
SELECT * INTO L_ERROR_FLAG FROM (SELECT 1 FROM INFORM I WHERE INS_TYPE_CODE = L_INS_TYPE_CODE AND ENGINE_NO = L_ENGINE_NO AND INFORM_ID <> P_INFORM_ID) WHERE ROWNUM = 1;
EXCEPTION
      WHEN NO_DATA_FOUND THEN
        L_ERROR_FLAG := 0;
END;
END IF;


ELSIF FIELD_REC.ORDER_BY = 4 AND L_SN_BODY IS NOT NULL THEN

BEGIN
SELECT * INTO L_ERROR_FLAG FROM (SELECT 1 FROM VW_BROK_CHK_DUP WHERE INS_TYPE_CODE = L_INS_TYPE_CODE AND CHAS_NO = L_SN_BODY) WHERE ROWNUM = 1;
EXCEPTION
      WHEN NO_DATA_FOUND THEN
        L_ERROR_FLAG := 0;
END;

IF L_ERROR_FLAG  = 0 THEN

BEGIN
SELECT * INTO L_ERROR_FLAG FROM (SELECT 1 FROM INFORM I WHERE INS_TYPE_CODE = L_INS_TYPE_CODE AND SN_BODY = L_SN_BODY AND INFORM_ID <> P_INFORM_ID) WHERE ROWNUM = 1;
EXCEPTION
      WHEN NO_DATA_FOUND THEN
        L_ERROR_FLAG := 0;
END;
END IF;

ELSIF FIELD_REC.ORDER_BY = 5 AND L_COVER_DATE IS NOT NULL THEN

BEGIN
SELECT * INTO L_ERROR_FLAG FROM (SELECT 1 FROM VW_BROK_CHK_DUP WHERE INS_TYPE_CODE = L_INS_TYPE_CODE AND CA_NO = L_CA_NO AND END_DT >= L_COVER_DATE) WHERE ROWNUM = 1;
EXCEPTION
      WHEN NO_DATA_FOUND THEN
        L_ERROR_FLAG := 0;
END;

END IF;

IF L_ERROR_FLAG = 1 THEN
INSERT INTO ERROR_LOG (
  ERROR_LOG_ID,
  ERROR_CODE,
  INFORM_ID,
  CREATE_DATE,
  ERROR_MSG
) SELECT
  SEQ_ERROR_LOG.NEXTVAL,
  'TBK005',
  P_INFORM_ID,
  CURRENT_DATE,
  REPLACE(L_ERROR_MSG, '{column}', FIELD_REC.DESCRIPTION)
FROM
  DUAL;
L_ROWCOUNT := L_ROWCOUNT + SQL%ROWCOUNT;
END IF;

END;
END LOOP;

--**********END TBK005*********--

--**********TBK006*********--

/*CA_NO 9 digits
PLAT_NO 2 thai characters 4 digits   '^[0-9]{0,1}[^\x00-\x7F]{1,2}[ ]{1}[0-9]{1,4}$'
PLAT_PROVINCE
ENGINE_CC
INS_NAME
INS_TYPE
DRIVER1_LICENSE_NO
DRIVER2_LICENSE_NO
*/

L_ERROR_FLAG := 0;

SELECT ERROR_MSG INTO L_ERROR_MSG FROM ERROR_CODE WHERE ERROR_CODE = 'TBK006';

FOR FIELD_REC IN
(SELECT ORDER_BY, FIELD, DESCRIPTION
FROM ERROR_FIELD WHERE ERROR_CODE = 'TBK006')
LOOP
BEGIN

SQL_STMT := 'SELECT CASE WHEN ' || FIELD_REC.FIELD || ' IS NULL THEN 1 ELSE 0 END FROM FRONT WHERE INFORM_ID = :P_INFORM_ID';
EXECUTE IMMEDIATE SQL_STMT INTO L_FIELD_IS_NULL USING P_INFORM_ID;

IF FIELD_REC.ORDER_BY IN (1)AND L_FIELD_IS_NULL = 0 THEN--CA_NO, ENGINE_CC, DRIVER1_LICENSE_NO, DRIVER2_LICENSE_NO THEN
SQL_STMT := 'SELECT CASE WHEN REGEXP_LIKE(' || FIELD_REC.FIELD || ',''^[[:digit:]]{9}$'') THEN 0 ELSE 1 END FROM FRONT WHERE INFORM_ID = :P_INFORM_ID';
EXECUTE IMMEDIATE SQL_STMT INTO L_ERROR_FLAG USING P_INFORM_ID;

ELSIF FIELD_REC.ORDER_BY IN (2)AND L_FIELD_IS_NULL = 0 THEN
SQL_STMT := 'SELECT CASE WHEN REGEXP_LIKE(' || FIELD_REC.FIELD || ',''^[0-9]{0,1}[^\x00-\x7F]{1,2}[ ]{1}[0-9]{1,4}$'') THEN 0 ELSE 1 END FROM FRONT WHERE INFORM_ID = :P_INFORM_ID';
EXECUTE IMMEDIATE SQL_STMT INTO L_ERROR_FLAG USING P_INFORM_ID;

ELSIF FIELD_REC.ORDER_BY IN (3)AND L_FIELD_IS_NULL = 0 THEN
BEGIN
SELECT 0 INTO L_ERROR_MSG FROM VW_BROK_PROVINCE WHERE PLAT_PROVINCE = FIELD_REC.FIELD;
EXCEPTION
      WHEN NO_DATA_FOUND THEN
        L_ERROR_FLAG := 1;
END;

ELSIF FIELD_REC.ORDER_BY IN (4)AND L_FIELD_IS_NULL = 0 THEN
SQL_STMT := 'SELECT CASE WHEN REGEXP_LIKE(' || FIELD_REC.FIELD || ',''^[[:digit:]]$'') THEN 0 ELSE 1 END FROM FRONT WHERE INFORM_ID = :P_INFORM_ID';
EXECUTE IMMEDIATE SQL_STMT INTO L_ERROR_FLAG USING P_INFORM_ID;

ELSIF FIELD_REC.ORDER_BY IN (5)AND L_FIELD_IS_NULL = 0 THEN
BEGIN
SELECT 0 INTO L_ERROR_MSG FROM VW_BROK_INS WHERE INS_NAME = FIELD_REC.FIELD;
EXCEPTION
      WHEN NO_DATA_FOUND THEN
        L_ERROR_FLAG := 1;
END;

ELSIF FIELD_REC.ORDER_BY IN (6) AND L_FIELD_IS_NULL = 0 THEN
BEGIN
SELECT 0 INTO L_ERROR_MSG FROM VW_BROK_INS_TYPE WHERE INS_TYPE = FIELD_REC.FIELD;
EXCEPTION
      WHEN NO_DATA_FOUND THEN
        L_ERROR_FLAG := 1;
END;

ELSIF FIELD_REC.ORDER_BY IN (7,8)AND L_FIELD_IS_NULL = 0 THEN
SQL_STMT := 'SELECT CASE WHEN REGEXP_LIKE(' || FIELD_REC.FIELD || ',''^[[:digit:]]{13}$'') THEN 0 ELSE 1 END FROM FRONT WHERE INFORM_ID = :P_INFORM_ID';
EXECUTE IMMEDIATE SQL_STMT INTO L_ERROR_FLAG USING P_INFORM_ID;
END IF;

IF L_ERROR_FLAG = 1 THEN
INSERT INTO ERROR_LOG (
  ERROR_LOG_ID,
  ERROR_CODE,
  INFORM_ID,
  CREATE_DATE,
  ERROR_MSG
) SELECT
  SEQ_ERROR_LOG.NEXTVAL,
  'TBK006',
  P_INFORM_ID,
  CURRENT_DATE,
  REPLACE(L_ERROR_MSG, '{column}', FIELD_REC.DESCRIPTION)
FROM
  DUAL;
END IF;
L_ROWCOUNT := L_ROWCOUNT + SQL%ROWCOUNT;
END;
END LOOP;

--**********END TBK006*********--

--**********TBK007*********--

L_ERROR_FLAG := 0;

SELECT ERROR_MSG INTO L_ERROR_MSG FROM ERROR_CODE WHERE ERROR_CODE = 'TBK007';

BEGIN
SELECT 0 INTO L_ERROR_FLAG FROM FRONT WHERE INFORM_ID = P_INFORM_ID AND TRUNC(COVER_DATE) >= TRUNC(EXPIRE_DATE - 180);
EXCEPTION
      WHEN NO_DATA_FOUND THEN
        L_ERROR_FLAG := 1;
END;

IF L_ERROR_FLAG = 1 THEN
INSERT INTO ERROR_LOG (
  ERROR_LOG_ID,
  ERROR_CODE,
  INFORM_ID,
  CREATE_DATE,
  ERROR_MSG
) SELECT
  SEQ_ERROR_LOG.NEXTVAL,
  'TBK007',
  P_INFORM_ID,
  CURRENT_DATE,
  L_ERROR_MSG
FROM
  DUAL;
L_ROWCOUNT := L_ROWCOUNT + SQL%ROWCOUNT;
END IF;

--**********END TBK007*********--


IF L_ROWCOUNT > 0 THEN
  P_ERROR_FLAG := 1;
ELSE
  P_ERROR_FLAG := 0;
END IF;

END;
